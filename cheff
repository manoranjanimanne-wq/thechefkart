import React, { useState, useEffect } from 'react';
import { createRoot } from 'react-dom/client';

// Mock JSON data for dish and ingredient listings
const mockDishes = [
  {
    id: '1',
    name: 'Tandoori Chicken',
    category: 'Main Courses',
    image: 'https://placehold.co/150x150/ff7f50/ffffff?text=Chicken',
    description: 'Tandoori chicken is a dish prepared by roasting chicken marinated in yogurt and spices in a tandoor, a cylindrical clay oven. The dish originated from the Indian subcontinent and is popular in many parts of the world.',
    ingredients: ['Chicken', 'Yogurt', 'Spices', 'Ginger paste', 'Garlic paste'],
    rating: 4,
  },
{
    id: '2',
    name: 'Dal Makhani',
    category: 'Main Courses',
    image: 'https://placehold.co/150x150/d2691e/ffffff?text=Dal',
    description: 'Dal makhani is a popular dish originating from the Punjab region of the Indian subcontinent. It is a modern staple in most Indian restaurants.',
    ingredients: ['Whole black lentils', 'Kidney beans', 'Butter', 'Cream', 'Spices'],
    rating: 5,
  },
  {
    id: '3',
    name: 'Fried Avocado Tacos',
    category: 'Appetizers',
    image: 'https://placehold.co/150x150/9acd32/ffffff?text=Tacos',
    description: 'Crispy fried avocado served in warm corn tortillas with a fresh cilantro-lime slaw and creamy chipotle sauce. A delicious vegetarian option!',
    ingredients: ['Avocado', 'Corn Tortillas', 'Slaw Mix', 'Chipotle Sauce', 'Lime'],
    rating: 4.5,
  },
{
    id: '4',
    name: 'Cabbage Rolls',
    category: 'Appetizers',
    image: 'https://placehold.co/150x150/4682b4/ffffff?text=Cabbage',
    description: 'A traditional dish where a filling is wrapped in blanched cabbage leaves. It can be prepared with a variety of fillings and sauces.',
    ingredients: ['Cabbage', 'Ground meat', 'Rice', 'Onions', 'Tomato sauce'],
    rating: 3.5,
  },
  {
    id: '5',
    name: 'North Indian Thali',
    category: 'Thali',
    image: 'https://placehold.co/150x150/b0c4de/ffffff?text=Thali',
    description: 'A traditional North Indian meal that consists of a platter of various dishes including curries, bread, rice, salad, and dessert.',
    ingredients: ['Assorted curries', 'Rice', 'Naan', 'Raita', 'Papad'],
    rating: 5,
  },
];

const categoryList = [...new Set(mockDishes.map(dish => dish.category))];
const Home = ({ onLogin }) => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <div className="flex flex-col items-center justify-center p-8 bg-white rounded-3xl shadow-lg w-full max-w-sm">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Welcome</h1>
        <p className="text-center text-gray-600 mb-8">
          Sign up or log in to continue
        </p>
        <button
          onClick={onLogin}
          className="w-full px-6 py-3 mb-4 text-lg font-semibold text-white bg-blue-500 rounded-full hover:bg-blue-600 transition-colors duration-200 shadow-md"
        >
          Sign up
        </button>
        <button
          onClick={onLogin}
          className="w-full px-6 py-3 text-lg font-semibold text-blue-500 bg-white border-2 border-blue-500 rounded-full hover:bg-blue-100 transition-colors duration-200 shadow-md"
        >
          Log in
        </button>
      </div>
    </div>
  );
};

const Header = ({ title, showBack = false, onBack, onShowSelections }) => (
  <header className="flex items-center justify-between p-4 bg-white shadow-md sticky top-0 z-10 w-full max-w-lg mx-auto rounded-b-3xl">
    {showBack ? (
      <button onClick={onBack} className="p-2 text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
        </svg>
      </button>
    ) : (
      <button className="p-2 text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    )}
    <h1 className="text-xl font-bold text-gray-800">{title}</h1>
    <div className="flex items-center space-x-2">
      <button className="p-2 text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
</button>
      <button onClick={onShowSelections} className="p-2 text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path d="M5 14l2.028 2.028A.996.996 0 008.01 17a.996.996 0 00.707-.293l6-6" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"></path>
          <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2z"></path>
        </svg>
      </button>
    </div>
  </header>
);
const DishList = ({ dishes, onSelectDish }) => (
  <div className="space-y-4 p-4">
    {dishes.map((dish) => (
      <div
        key={dish.id}
        className="flex items-center bg-white rounded-xl shadow-md p-4 space-x-4 cursor-pointer hover:bg-gray-50 transition-colors duration-150"
        onClick={() => onSelectDish(dish)}
      >
        <img
          src={dish.image}
          alt={dish.name}
          className="w-24 h-24 rounded-lg object-cover"
        />
        <div className="flex-1">
          <h2 className="text-lg font-semibold text-gray-800">{dish.name}</h2>
          <p className="text-sm text-gray-500 line-clamp-2">{dish.description}</p>
          <div className="flex items-center mt-2">
            <span className="text-yellow-400">
              {dish.rating >= 4 ? '★★★★☆' : '★★★☆☆'}
            </span>
            <span className="ml-2 text-sm text-gray-500">
              {dish.rating}
            </span>
          </div>
</div>
      </div>
    ))}
  </div>
);

const SelectedDish = ({ dish, onBack, onAddSelection }) => {
  return (
    <div className="p-4 pt-0">
      <Header title={dish.name} showBack={true} onBack={onBack} />
      <div className="flex flex-col items-center">
        <img
          src={dish.image}
          alt={dish.name}
          className="w-full h-64 object-cover rounded-xl mt-4 shadow-md"
        />
        <div className="w-full max-w-lg mt-4 bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">{dish.name}</h2>
          <p className="text-sm text-gray-500 mb-4">{dish.category}</p>
          <p className="text-base text-gray-700 mb-6">{dish.description}</p>
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Ingredients</h3>
          <ul className="list-disc list-inside space-y-1 text-gray-600">
            {dish.ingredients.map((ingredient, index) => (
              <li key={index}>{ingredient}</li>
            ))}
          </ul>
          <button
onClick={() => onAddSelection(dish)}
            className="w-full mt-6 px-6 py-3 text-lg font-semibold text-white bg-green-500 rounded-full hover:bg-green-600 transition-colors duration-200 shadow-md"
          >
            Add to Selections
          </button>
        </div>
      </div>
    </div>
  );
};

const SelectionsList = ({ selections, onBack, onRemoveSelection }) => (
  <div className="flex flex-col min-h-screen bg-gray-100 p-4">
    <Header title="My Selections" showBack={true} onBack={onBack} />
    <div className="space-y-4 pt-4">
      {selections.length === 0 ? (
        <p className="text-center text-gray-500 mt-8">You have no selections yet.</p>
      ) : (
        selections.map((dish) => (
          <div
            key={dish.id}
            className="flex items-center justify-between bg-white rounded-xl shadow-md p-4 space-x-4"
          >
            <div className="flex items-center space-x-4">
              <img
src={dish.image}
                alt={dish.name}
                className="w-16 h-16 rounded-lg object-cover"
              />
              <div className="flex-1">
                <h2 className="text-lg font-semibold text-gray-800">{dish.name}</h2>
              </div>
            </div>
            <button
              onClick={() => onRemoveSelection(dish.id)}
              className="p-2 text-red-500 rounded-full hover:bg-red-100 transition-colors duration-150"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </div>
        ))
      )}
    </div>
  </div>
);

const FilterBar = ({ categories, onSelectCategory, selectedCategory }) => (
  <div className="flex overflow-x-auto gap-2 p-4 pt-0 pb-2">
    {categories.map((category) => (
      <button
        key={category}
        className={`px-4 py-2 rounded-full text-sm whitespace-nowrap ${
          selectedCategory === category
            ? 'bg-blue-500 text-white shadow-md'
            : 'bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors duration-150'
        }`}
        onClick={() => onSelectCategory(category)}
      >
        {category}
      </button>
    ))}
  </div>
);

function App() {
  const [route, setRoute] = useState('home');
  const [selectedDish, setSelectedDish] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(categoryList[0]);
  const [selections, setSelections] = useState([]);

  // Filter dishes based on the selected category
  const dishes = mockDishes.filter(dish => dish.category === selectedCategory);

  const handleLogin = () => {
    setRoute('main');
  };

  const handleSelectDish = (dish) => {
    setSelectedDish(dish);
    setRoute('dish');
  };

  const handleBack = () => {
    if (route === 'dish') {
      setRoute('main');
    } else if (route === 'selections') {
      setRoute('main');
    }
  };
const handleShowSelections = () => {
    setRoute('selections');
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setRoute('main');
  };

  const handleAddSelection = (dish) => {
    // Check if the dish is already in selections to avoid duplicates
    if (!selections.find(s => s.id === dish.id)) {
      setSelections(prevSelections => [...prevSelections, dish]);
      console.log("Dish added to selections successfully.");
    }
    setRoute('main'); // Go back to the main list after adding
  };

  const handleRemoveSelection = (dishId) => {
    setSelections(prevSelections => prevSelections.filter(dish => dish.id !== dishId));
    console.log("Dish removed from selections successfully.");
  };

const renderContent = () => {
    switch (route) {
      case 'home':
        return <Home onLogin={handleLogin} />;
      case 'main':
        return (
          <div className="flex flex-col min-h-screen bg-gray-100">
            <Header title="React Native Assignment" onShowSelections={handleShowSelections} />
            <FilterBar
              categories={categoryList}
              onSelectCategory={handleCategorySelect}
              selectedCategory={selectedCategory}
            />
            <DishList dishes={dishes} onSelectDish={handleSelectDish} />
          </div>
        );
      case 'dish':
        return <SelectedDish dish={selectedDish} onBack={handleBack} onAddSelection={handleAddSelection} />;
      case 'selections':
        return <SelectionsList selections={selections} onBack={handleBack} onRemoveSelection={handleRemoveSelection} />;
      default:
        return <Home onLogin={handleLogin} />;
    }
  };
return (
    <div className="font-sans antialiased text-gray-900 bg-gray-100 min-h-screen">
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
          body { font-family: 'Inter', sans-serif; }
          .container {
            max-width: 500px;
            margin: 0 auto;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          }
          .line-clamp-2 {
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
          }
        `}
      </style>
      <div className="container min-h-screen">
        {renderContent()}
      </div>
    </div>
  );
}

const container = document.getElementById('root');
if (container) {
  const root = createRoot(container);
  root.render(<App />);
}

export default App;
